{% extends 'knp_menu.html.twig' %}

{# Paste custom extra menu types#}
{% block label %}
    {% import _self as macros %}
    {% if item.extra('image', false) %}
        <img src="{{ asset(item.extra('image')) }}" class="avatar">
        <span class="nav-link-text ms-2 ps-1">{{ item.label }}</span>
    {% elseif item.level == 1 %}
        <i class="material-icons-round opacity-10">{{ item.label }}</i>
        <span class="nav-link-text ms-2 ps-1">{{ item.name }}</span>
    {% elseif item.level == 2 %}
        <span class="sidenav-mini-icon"> {{ item.label }} </span>
        <span class="sidenav-normal ms-2 ps-1"> {{ item.name }} <b class="caret"></b></span>
    {% else %}
        {{ parent() }}
    {% endif %}
{% endblock label %}

{% block linkElement %}
    {% import _self as knp_menu %}
    <a href="{{ item.uri ?: 'javascript:' }}"{{ knp_menu.attributes(item.linkAttributes) }}>{{ block('label') }}</a>
{% endblock %}

{% block list %}
    {% if item.linkAttribute('data-action') is not empty %}
        {% if item.hasChildren and options.depth is not same as(0) and item.displayChildren %}
            {% import _self as knp_menu %}
            <div class="collapse">
                <ul{{ knp_menu.attributes(listAttributes) }}>
                    {{ block('children') }}
                </ul>
            </div>
        {% endif %}
    {% else %}
        {{ parent() }}
    {% endif %}
{% endblock %}

{% block item %}
    {% if item.displayed %}
        {# building the class of the item #}
        {%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
        {%- if matcher.isCurrent(item) %}
            {%- set classes = classes|merge([options.currentClass]) %}
        {%- elseif matcher.isAncestor(item, options.matchingDepth) %}
            {%- set classes = classes|merge([options.ancestorClass]) %}
        {%- endif %}
        {%- if item.actsLikeFirst %}
            {%- set classes = classes|merge([options.firstClass]) %}
        {%- endif %}
        {%- if item.actsLikeLast %}
            {%- set classes = classes|merge([options.lastClass]) %}
        {%- endif %}

        {# Mark item as "leaf" (no children) or as "branch" (has children that are displayed) #}
        {% if item.hasChildren and options.depth is not same as(0) %}
            {% if options.branch_class is not empty and item.displayChildren %}
                {%- set classes = classes|merge([options.branch_class]) %}
            {% endif %}
        {% elseif options.leaf_class is not empty %}
            {%- set classes = classes|merge([options.leaf_class]) %}
        {%- endif %}

        {%- set attributes = item.attributes %}
        {%- if classes is not empty %}
            {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
        {%- endif %}
        {# displaying the item #}
        {% import _self as knp_menu %}
        <li{{ knp_menu.attributes(attributes) }}>
            {%- if (not matcher.isCurrent(item) or options.currentAsLink) %}
                {{ block('linkElement') }}
            {%- else %}
                {{ block('spanElement') }}
            {%- endif %}
            {# render the list of children#}
            {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
            {%- set childrenClasses = childrenClasses|merge(['nav menu_level_' ~ item.level]) %}
            {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}
            {{ block('list') }}
        </li>
    {% endif %}
    {% if item.extra('break', false) %}
        <hr class="horizontal light mt-0">
    {% endif %}
{% endblock %}